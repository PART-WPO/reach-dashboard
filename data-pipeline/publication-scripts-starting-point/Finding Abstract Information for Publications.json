{"files":[{"id":"f4b76963-b75b-48ea-b394-f74fdbc9e089","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"567d4c32-d27b-4781-8b2a-6c9c029a1b40","name":"Code","type":"server_js","source":"/**\n * getAllPublicationsForAwards\n *\n * Purpose:\n *   Reads a list of DOIs from the sheet \"Pubs Prior to 10/1/24\",\n *   queries the Semantic Scholar API for details about each DOI,\n *   and writes the results (including abstracts) to a sheet called\n *   \"All publications with abstracts\".\n *\n * Output:\n *   A new table with the following headers:\n *   [DOI, Title, Published Date, Citation, Abstract]\n *\n * Notes:\n *   - DOIs must be listed in column B of \"Pubs Prior to 10/1/24\" (starting at row 2).\n *   - Existing content in the output sheet is overwritten each run.\n *   - If the output sheet does not exist, it will be created automatically.\n */\nfunction getAllPublicationsForAwards() {\n  // Get the sheet that contains the DOIs we want to look up\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Pubs Prior to 10/1/24\");\n  if (!sheet) throw new Error(\u0027Sheet \"Pubs Prior to 10/1/24\" not found.\u0027);\n\n  // Read all DOIs from column B, starting at row 2, and flatten into a simple array\n  const doiColumn \u003d sheet.getRange(\"B2:B\" + sheet.getLastRow()).getValues().flat();\n\n  // Prepare results table with header row (we’re also including Abstracts here)\n  const results \u003d [[\"DOI\", \"Title\", \"Published Date\", \"Citation\", \"Abstract\"]];\n  let totalFound \u003d 0;\n\n  // Loop through every DOI in the list\n  doiColumn.forEach((doi, index) \u003d\u003e {\n    if (doi) { // Skip blank rows\n      Logger.log(`[${index + 1}/${doiColumn.length}] Checking DOI: ${doi}`);\n\n      // Query Semantic Scholar API for metadata about this DOI\n      const pub \u003d searchSemanticScholarForDOI(doi);\n\n      if (pub) {\n        const pubDate \u003d pub.publishedDate; // Raw published date returned from API\n\n        // Log the published date so we can debug formatting issues\n        Logger.log(`Published Date for DOI ${doi}: ${pubDate}`);\n\n        // Default to \"Invalid date\" unless we can parse it\n        let pubDateStr \u003d \"Invalid date\";\n\n        // If publishedDate is valid, convert it to YYYY-MM-DD format\n        if (pubDate \u0026\u0026 !isNaN(Date.parse(pubDate))) {\n          const pubDateObj \u003d new Date(pubDate);\n          pubDateStr \u003d pubDateObj.toISOString().split(\"T\")[0];\n        }\n\n        // If an abstract exists, use it; otherwise provide a default placeholder\n        const abstract \u003d pub.abstract ? pub.abstract : \"No abstract available\";\n\n        // Add this publication’s data to our results table\n        results.push([doi, pub.title, pubDateStr, pub.citation, abstract]);\n        totalFound++;\n      }\n    }\n  });\n\n  // Find or create the output sheet where results will be written\n  const ss \u003d SpreadsheetApp.getActiveSpreadsheet();\n  const outputSheetName \u003d \"All publications with abstracts\";\n  let outSheet \u003d ss.getSheetByName(outputSheetName);\n\n  if (!outSheet) {\n    // Create a new sheet if it doesn’t exist\n    outSheet \u003d ss.insertSheet(outputSheetName);\n    Logger.log(`Created new sheet: ${outputSheetName}`);\n  } else {\n    Logger.log(`Sheet \"${outputSheetName}\" already exists.`);\n  }\n\n  // Write all results (headers + data rows) into the sheet, replacing existing content\n  outSheet.getRange(1, 1, results.length, results[0].length).setValues(results);\n\n  Logger.log(`✅ Added ${totalFound} publication(s) with abstracts to \"${outputSheetName}\"`);\n}\n\n/**\n * searchSemanticScholarForDOI\n *\n * Purpose:\n *   Look up metadata about a publication using its DOI\n *   via the Semantic Scholar API.\n *\n * Input:\n *   doi (string) – The DOI of the paper to look up.\n *\n * Returns:\n *   An object containing publication details (title, abstract, citation, publishedDate, etc.)\n *   or null if the request fails.\n */\nfunction searchSemanticScholarForDOI(doi) {\n  const url \u003d `https://api.semanticscholar.org/v1/paper/${doi}`;  // Semantic Scholar DOI endpoint\n\n  try {\n    // Send GET request to Semantic Scholar\n    const response \u003d UrlFetchApp.fetch(url);\n\n    // Parse JSON response into a JavaScript object\n    const paperData \u003d JSON.parse(response.getContentText());\n\n    return paperData;  // Return the parsed publication object\n  } catch (e) {\n    // If request fails, log error and return null\n    Logger.log(`Error fetching DOI ${doi}: ${e.message}`);\n    return null;\n  }\n}\n"}]}