{"files":[{"id":"528cbba6-182a-4c70-8959-3f5842cb44d4","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"3e6c7fd5-289c-48e7-bd3c-fc35b55ea90a","name":"Code","type":"server_js","source":"/**\n * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n * PIPELINE: Smartsheet → Google Sheet → GitHub CSV\n * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n * This script:\n *  1. Imports data from a Smartsheet Report\n *  2. Cleans, normalizes, and enriches the data for REACH\n *  3. Uploads the final CSV into a GitHub repository for use in the REACH UI\n * \n * Each helper function handles a specific step in the pipeline.\n */\n\n/**\n * Import data from a Smartsheet report into the \"Open Science Report\" sheet.\n * - Paginates through Smartsheet API (500 rows at a time)\n * - Clears old data\n * - Writes fresh headers and row content\n */\n\nfunction importSmartsheetReport() {\n  const baseUrl \u003d \u0027https://api.smartsheetgov.com/2.0/reports/ENTER REPORT ID\u0027; // Make sure to add the Smartsheet ID from the report you are pulling in\n  const pageSize \u003d 500;\n  const smartsheetToken \u003d PropertiesService.getScriptProperties().getProperty(\u0027SMARTSHEET_TOKEN\u0027); // Make sure to add your Smartsheet token to the settings under \"Script Properties\"\n  const token \u003d `Bearer ${smartsheetToken}`; // Replace with real token\n\n  const headers \u003d {\n    \u0027Authorization\u0027: token\n  };\n\n  let allRows \u003d [];\n  let columns \u003d null;\n  let page \u003d 1;\n\n// Loop through Smartsheet report until all rows are retrieved\n  while (true) {\n    const url \u003d `${baseUrl}?pageSize\u003d${pageSize}\u0026page\u003d${page}`;\n    const response \u003d UrlFetchApp.fetch(url, {\n      method: \u0027get\u0027,\n      headers: headers,\n      muteHttpExceptions: true\n    });\n\n    const json \u003d JSON.parse(response.getContentText());\n\n    if (!json || !json.rows || json.rows.length \u003d\u003d\u003d 0) {\n      break; // No more rows\n    }\n\n    if (!columns) {\n      columns \u003d json.columns;\n    }\n\n    allRows \u003d allRows.concat(json.rows);\n\n    if (json.rows.length \u003c pageSize) {\n      break; // Last page\n    }\n\n    page++;\n  }\n\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Open Science Report\");\n  if (!sheet) throw new Error(\u0027Sheet \"Open Science Report\" not found\u0027);\n\n  // Clear all existing data below headers\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003e 1) {\n    sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).clearContent();\n  }\n\n  // Write header row from Smartsheet column titles\n  const headerTitles \u003d columns.map(col \u003d\u003e col.title);\n  sheet.getRange(1, 1, 1, headerTitles.length).setValues([headerTitles]);\n\n  // Map rows into spreadsheet-friendly format\n  const data \u003d allRows.map(row \u003d\u003e {\n  const cellMap \u003d {};\n  row.cells.forEach(cell \u003d\u003e {\n    let value \u003d cell.displayValue || cell.value || \u0027\u0027;\n\n      // Normalize date strings → MM/DD/YY\n    if (typeof value \u003d\u003d\u003d \u0027string\u0027 \u0026\u0026 value.match(/^\\w{3} \\w{3} \\d{2,4}/)) {\n      const date \u003d new Date(value);\n      if (!isNaN(date)) {\n        value \u003d Utilities.formatDate(date, Session.getScriptTimeZone(), \u0027MM/dd/yy\u0027);\n      }\n    }\n\n    cellMap[cell.virtualColumnId] \u003d value;\n  });\n\n  return columns.map(col \u003d\u003e cellMap[col.virtualId] || \u0027\u0027);\n});\n\n  // Write rows in chunks to avoid \"too many rows\" API errors\n  const chunkSize \u003d 100;\n  for (let i \u003d 0; i \u003c data.length; i +\u003d chunkSize) {\n    const chunk \u003d data.slice(i, i + chunkSize);\n    sheet.getRange(i + 2, 1, chunk.length, headerTitles.length).setValues(chunk);\n  }\n\n  Logger.log(`Successfully wrote ${data.length} rows.`);\n}\n\n/**\n * Reformat all dates in column M into MM/DD/YYYY format.\n * Smartsheet exports inconsistent date formats, this standardizes them.\n */\n\nfunction reformatDatesInColumnM() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Open Science Report\");\n  const colIndex \u003d 13; // Column M\n  const numRows \u003d sheet.getLastRow();\n\n  if (numRows \u003c 2) return; // No data to process\n\n  const range \u003d sheet.getRange(2, colIndex, numRows - 1, 1); // From row 2 down, one column wide\n  const values \u003d range.getValues();\n\n  const formatted \u003d values.map(([cell]) \u003d\u003e {\n    if (!cell) return [\"\"]; // Leave blank cells empty\n\n    if (Object.prototype.toString.call(cell) \u003d\u003d\u003d \"[object Date]\") {\n      return [Utilities.formatDate(cell, Session.getScriptTimeZone(), \"MM/dd/yyyy\")];\n    }\n\n    if (typeof cell \u003d\u003d\u003d \"string\" \u0026\u0026 cell.includes(\"GMT\")) {\n      const parsed \u003d new Date(cell);\n      if (!isNaN(parsed)) {\n        return [Utilities.formatDate(parsed, Session.getScriptTimeZone(), \"MM/dd/yyyy\")];\n      }\n    }\n\n    return [cell]; // Leave unchanged if not a recognized date\n  });\n\n  range.setValues(formatted);\n  sheet.getRange(2, colIndex, numRows - 1, 1).setValues(formatted);\n  sheet.getRange(2, colIndex, numRows - 1, 1).setNumberFormat(\"MM/dd/yyyy\");\n}\n\n/**\n * Generate a combined search string (title + abstract) for REACH keyword search.\n * Writes combined text into column W.\n */\n\nfunction generateSearchColumn() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Open Science Report\");\n  if (!sheet) throw new Error(\u0027Sheet \"Open Science Report\" not found\u0027);\n\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  // Read J (10) + K (11) unchanged\n  const titleAbstractData \u003d sheet.getRange(2, 10, lastRow - 1, 2).getValues();\n\n  const combinedSearchValues \u003d titleAbstractData.map(row \u003d\u003e {\n    const title \u003d row[0] || \"\";\n    const abstract \u003d row[1] || \"\";\n    const combined \u003d [title, abstract]\n      .map(v \u003d\u003e v.toString().toLowerCase().trim())\n      .filter(v \u003d\u003e v !\u003d\u003d \"\")\n      .join(\", \");\n    return [combined];\n  });\n\n  // Write to W (23)\n  sheet.getRange(2, 23, combinedSearchValues.length, 1).setValues(combinedSearchValues);\n}\n\n/**\n * Truncate abstracts (column K) to 45 words for UI card preview.\n * Writes results into column X.\n */\n\nfunction truncateBriefAbstract() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Open Science Report\");\n  if (!sheet) throw new Error(\u0027Sheet \"Open Science Report\" not found\u0027);\n\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  // Read K (11) unchanged\n  const abstractData \u003d sheet.getRange(2, 11, lastRow - 1, 1).getValues();\n\n  const truncatedAbstracts \u003d abstractData.map(row \u003d\u003e {\n    const abstract \u003d row[0] || \"\";\n    const words \u003d abstract.split(/\\s+/);\n    const truncated \u003d words.slice(0, 45).join(\" \");\n    const finalText \u003d words.length \u003e 45 ? truncated + \"...\" : truncated;\n    return [finalText];\n  });\n\n  // Write to X (24)\n  sheet.getRange(2, 24, truncatedAbstracts.length, 1).setValues(truncatedAbstracts);\n}\n\n/**\n * Combine multiple link columns (N–Q) into a single field with newline separators.\n * Writes results into column Y.\n */\n\nfunction combineLinksIntoOneColumn() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  // Read N (14) → Q (17) unchanged\n  const linkData \u003d sheet.getRange(2, 14, lastRow - 1, 4).getValues();\n\n  const combinedLinks \u003d linkData.map(row \u003d\u003e {\n    const nonEmpty \u003d row.filter(link \u003d\u003e link \u0026\u0026 link.toString().trim() !\u003d\u003d \"\");\n    return [nonEmpty.join(\u0027\\n\u0027)];\n  });\n\n  // Write to Y (25)\n  sheet.getRange(2, 25, combinedLinks.length, 1).setValues(combinedLinks);\n}\n\n/**\n * Convert numeric output type codes (1–4) into HTML with icons + labels.\n * Writes results into column Z.\n */\n\nfunction formatOutputTypeWithIcons() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  const outputTypeValues \u003d sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // A (1)\n\n  const htmlFormatted \u003d outputTypeValues.map(row \u003d\u003e {\n    const value \u003d row[0];\n    let result \u003d \"Unknown\";\n    switch (value) {\n      case 1: result \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003elibrary_books\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eArticle\u003c/span\u003e\"; break;\n      case 2: result \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003eterminal\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eCode Release\u003c/span\u003e\"; break;\n      case 3: result \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003estorage\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eAvailable Data\u003c/span\u003e\"; break;\n      case 4: result \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003efolder_open\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eOther Output\u003c/span\u003e\"; break;\n    }\n    return [result];\n  });\n\n  // Write to Z (26)\n  sheet.getRange(2, 26, htmlFormatted.length, 1).setValues(htmlFormatted);\n}\n\n/**\n * Assign color codes to card headers based on output type.\n * Writes results into column AA.\n */\n\nfunction assignCardHeaderColors() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  const outputTypes \u003d sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // A (1)\n\n  const colorCodes \u003d outputTypes.map(row \u003d\u003e {\n    const type \u003d row[0];\n    let color \u003d \"#ffffff\";\n    switch (type) {\n      case 1: color \u003d \"#cce5ff\"; break;\n      case 2: color \u003d \"#ffe6cc\"; break;\n      case 3: color \u003d \"#d4edda\"; break;\n      case 4: color \u003d \"#f0c1f7\"; break;\n    }\n    return [color];\n  });\n\n  // Write to AA (27)\n  sheet.getRange(2, 27, colorCodes.length, 1).setValues(colorCodes);\n}\n\n/**\n * Assign color codes to link text based on output type.\n * Writes results into column AB.\n */\n\nfunction assignLinkColors() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  const outputTypes \u003d sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // A (1)\n\n  const colorCodes \u003d outputTypes.map(row \u003d\u003e {\n    const type \u003d row[0];\n    let color \u003d \"#ffffff\";\n    switch (type) {\n      case 1: color \u003d \"#1a73e8\"; break;\n      case 2: color \u003d \"#f68c1f\"; break;\n      case 3: color \u003d \"#28a745\"; break;\n      case 4: color \u003d \"#e56af7\"; break;\n    }\n    return [color];\n  });\n\n  // Write to AB (28)\n  sheet.getRange(2, 28, colorCodes.length, 1).setValues(colorCodes);\n}\n\n/**\n * Assign descriptive link text (e.g. \"View Full Publication\") with icons.\n * Writes results into column AC.\n */\n\nfunction assignLinkText() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  const outputTypes \u003d sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // A (1)\n\n  const labels \u003d outputTypes.map(row \u003d\u003e {\n    const type \u003d row[0];\n    let label \u003d \"Unknown\";\n    switch (type) {\n      case 1: label \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003elink\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eView Full Publication\u003c/span\u003e\"; break;\n      case 2: label \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003elink\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eView Code Release\u003c/span\u003e\"; break;\n      case 3: label \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003elink\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eView Available Data\u003c/span\u003e\"; break;\n      case 4: label \u003d \"\u003cspan class\u003d\u0027material-icons\u0027 style\u003d\u0027font-size: 20px; vertical-align: middle;\u0027\u003elink\u003c/span\u003e \u003cspan style\u003d\u0027vertical-align: middle; line-height: 1.5;\u0027\u003eView Other Outputs\u003c/span\u003e\"; break;\n    }\n    return [label];\n  });\n\n  // Write to AC (29)\n  sheet.getRange(2, 29, labels.length, 1).setValues(labels);\n}\n\n/**\n * Add open access labels:\n * - “Available on NOAA IR” for articles in NOAA IR\n * - “Publicly Available” for other outputs\n * Writes results into column AD.\n */\n\nfunction assignOpenAccessLabel() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  const irValues \u003d sheet.getRange(2, 6, lastRow - 1, 1).getValues(); // F (6)\n  const outputTypes \u003d sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // A (1)\n\n  const labels \u003d irValues.map((row, i) \u003d\u003e {\n    const ir \u003d row[0];\n    const type \u003d outputTypes[i][0];\n\n    if ((ir \u003d\u003d\u003d true || ir \u003d\u003d\u003d \"TRUE\") \u0026\u0026 type \u003d\u003d\u003d 1) {\n      return [\"Available on\u003cbr\u003eNOAA IR\"];\n    } else if (type \u003d\u003d\u003d 2 || type \u003d\u003d\u003d 3 || type \u003d\u003d\u003d 4) {\n      return [\"Publicly\u003cbr\u003e Available\"];\n    } else {\n      return [\"\"];\n    }\n  });\n\n  // Write to AD (30)\n  sheet.getRange(2, 30, labels.length, 1).setValues(labels);\n}\n\n/**\n * Add open access icons (cloud_done) to outputs.\n * Writes results into column AE.\n */\n\nfunction assignOpenAccessIcon() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003c 2) return;\n\n  const irValues \u003d sheet.getRange(2, 6, lastRow - 1, 1).getValues(); // F (6)\n  const outputTypes \u003d sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // A (1)\n\n  const labels \u003d irValues.map((row, i) \u003d\u003e {\n    const ir \u003d row[0];\n    const type \u003d outputTypes[i][0];\n\n    if ((ir \u003d\u003d\u003d true || ir \u003d\u003d\u003d \"TRUE\") \u0026\u0026 type \u003d\u003d\u003d 1) {\n      return [\"\u003cspan class\u003d\u0027material-icons\u0027\u003ecloud_done\u003c/span\u003e\"];\n    } else if (type \u003d\u003d\u003d 2 || type \u003d\u003d\u003d 3 || type \u003d\u003d\u003d 4) {\n      return [\"\u003cspan class\u003d\u0027material-icons\u0027\u003ecloud_done\u003c/span\u003e\"];\n    } else {\n      return [\"\"];\n    }\n  });\n\n  // Write to AE (31)\n  sheet.getRange(2, 31, labels.length, 1).setValues(labels);\n}\n\n/**\n * Normalize values in the \"Funded By\" column.\n * Maps acronyms (e.g. JTTI, EPIC, OBS) into full program names.\n * Writes cleaned values back into column I.\n */\n\nfunction updateFundedByColumn() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Open Science Report\"); // Change to your sheet name\n  const range \u003d sheet.getRange(2, 9, sheet.getLastRow() - 1); // Row 2 down, column 9 (I)\n  const values \u003d range.getValues();\n\n  const testbedAcronyms \u003d [\"JHT\", \"HMT\", \"HWT\", \"CTB\", \"USWRP\", \"FWT\", \"HOT\", \"USWRP R2O\", \"Testbeds-HWT\"]; // Add others as needed\n\n  for (let i \u003d 0; i \u003c values.length; i++) {\n    let cell \u003d values[i][0];\n    if (!cell) continue;\n\n    const trimmed \u003d cell.toString().trim().toUpperCase();\n\n    if (trimmed \u003d\u003d\u003d \"JTTI\") {\n      values[i][0] \u003d \"Joint Technology Transfer Initiative (JTTI)\";\n    } else if (trimmed \u003d\u003d\u003d \"JTTI-STI\") {\n      values[i][0] \u003d \"Joint Technology Transfer Initiative (JTTI)\";\n    } else if (trimmed \u003d\u003d\u003d \"EPIC\") {\n      values[i][0] \u003d \"Earth Prediction Innovation Center (EPIC)\";\n    } else if (trimmed \u003d\u003d\u003d \"OBS\") {\n      values[i][0] \u003d \"Observations\";\n    } else if (trimmed \u003d\u003d\u003d \"SPSM\") {\n      values[i][0] \u003d \"Observations\";\n    } else if (trimmed \u003d\u003d\u003d \"APAR\") {\n      values[i][0] \u003d \"Observations\";\n    } else if (trimmed \u003d\u003d\u003d \"IS\") {\n      values[i][0] \u003d \"Observations\";\n    } else if (trimmed \u003d\u003d\u003d \"AQRF\") {\n      values[i][0] \u003d \"Synoptic\";\n    } else if (trimmed \u003d\u003d\u003d \"FIREWX\") {\n      values[i][0] \u003d \"Synoptic\";\n    } else if (trimmed \u003d\u003d\u003d \"S2S\") {\n      values[i][0] \u003d \"Subseasonal to Seasonal (S2S)\";\n    } else if (trimmed \u003d\u003d\u003d \"CLIMATE SLA\") {\n      values[i][0] \u003d \"Subseasonal to Seasonal (S2S)\";\n    } else if (trimmed \u003d\u003d\u003d \"ESPC\") {\n      values[i][0] \u003d \"Subseasonal to Seasonal (S2S)\";\n    } else if (trimmed \u003d\u003d\u003d \"INNOVATIONS\") {\n      values[i][0] \u003d \"Subseasonal to Seasonal (S2S)\";  \n    } else if (testbedAcronyms.includes(trimmed)) {\n      values[i][0] \u003d \"Testbeds\";\n    }\n  }\n\n  range.setValues(values);\n}\n\n/**\n * Upload the cleaned sheet to GitHub as a CSV.\n * - Sanitizes text for safe CSV export\n * - Encodes CSV as Base64\n * - Pushes file via GitHub API (creates or updates)\n */\n\nfunction uploadSheetToGitHub() {\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Open Science Report\");\n  const range \u003d sheet.getDataRange();\n  const values \u003d range.getValues();\n\n  // Helper to clean problematic characters that often become ?\n  function sanitizeForCSV(text) {\n    if (typeof text !\u003d\u003d \u0027string\u0027) return text;\n    return text\n      .replace(/\\u2013|\\u2014|\\u2012|\\u2011/g, \"-\") // en dash, em dash, etc.\n      .replace(/[\\u2018\\u2019]/g, \"\u0027\")             // curly apostrophes\n      .replace(/[\\u201C\\u201D]/g, \u0027\"\u0027)             // curly quotes\n      .replace(/\\u00A0/g, \" \")                     // non-breaking space\n      .replace(/\\uFFFD/g, \"\")                      // � replacement character\n      .replace(/[^\\x00-\\x7F]/g, \"\");               // remove any remaining non-ASCII\n  }\n\n  // Convert to sanitized CSV\n  const csv \u003d values.map(row \u003d\u003e\n    row.map(cell \u003d\u003e {\n      const clean \u003d sanitizeForCSV(String(cell));\n      return `\"${clean.replace(/\"/g, \u0027\"\"\u0027)}\"`;\n    }).join(\",\")\n  ).join(\"\\n\");\n\n  // Encode CSV to Base64\n  const base64csv \u003d Utilities.base64Encode(csv);\n\n  // GitHub info\n  const repo \u003d \u0027INSERT YOUR REPOSITORY\u0027;       \n  const path \u003d \u0027INSERT YOUR PATH\u0027;\n  const branch \u003d \u0027main\u0027;                        \n  const githubToken \u003d PropertiesService.getScriptProperties().getProperty(\u0027GITHUB_TOKEN\u0027); //Insert Your GITHUB_TOKEN into the Script Properties in Google App Script settings\n\n  // Get current SHA (if file exists, needed for updates)\n  const getUrl \u003d `https://api.github.com/repos/${repo}/contents/${path}`;\n  const getResponse \u003d UrlFetchApp.fetch(getUrl, {\n    method: \u0027get\u0027,\n    headers: {\n      Authorization: `Bearer ${githubToken}`,\n      Accept: \u0027application/vnd.github.v3+json\u0027\n    },\n    muteHttpExceptions: true\n  });\n\n  let sha \u003d null;\n  if (getResponse.getResponseCode() \u003d\u003d\u003d 200) {\n    const getJson \u003d JSON.parse(getResponse.getContentText());\n    sha \u003d getJson.sha;\n  }\n\n  // Push new content\n  const payload \u003d {\n    message: `Update CSV export from Google Sheet`,\n    content: base64csv,\n    branch: branch\n  };\n  if (sha) payload.sha \u003d sha;\n\n  const putUrl \u003d `https://api.github.com/repos/${repo}/contents/${path}`;\n  const putResponse \u003d UrlFetchApp.fetch(putUrl, {\n    method: \u0027put\u0027,\n    headers: {\n      Authorization: `Bearer ${githubToken}`,\n      Accept: \u0027application/vnd.github.v3+json\u0027\n    },\n    contentType: \u0027application/json\u0027,\n    payload: JSON.stringify(payload)\n  });\n\n  const result \u003d JSON.parse(putResponse.getContentText());\n  Logger.log(`CSV uploaded: ${result.content.download_url}`);\n}\n\n/**\n * Set a monthly recurring trigger (typically the 15th of every month to automatically run the entire pipeline)\n * Run the full ETL pipeline:\n *  1. Import data from Smartsheet\n *  2. Clean and format\n *  3. Enrich metadata\n *  4. Upload to GitHub\n */\n\nfunction runFullPipeline() {\n  importSmartsheetReport();         // Step 1: Get data from Smartsheet\n  reformatDatesInColumnM();            // Step 2: Format dates\n  generateSearchColumn();           // Step 3: Create search string\n  truncateBriefAbstract();          // Step 4: Shorten abstract\n  combineLinksIntoOneColumn();      // Step 5: Combine link columns\n  formatOutputTypeWithIcons();      // Step 6: Add output type icons\n  assignCardHeaderColors();         // Step 7: Assign header colors\n  assignLinkColors();               // Step 8: Assign link colors\n  assignLinkText();                 // Step 9: Assign link display text\n  assignOpenAccessLabel();          // Step 10: Add open access labels\n  assignOpenAccessIcon();           // Step 11: Add open access icons\n  updateFundedByColumn();           // Step 12: Clean and update Funded By column\n  uploadSheetToGitHub();            // Step 13: Uploaded new CSV to GitHub\n\n  Logger.log(\"🎉 Full pipeline completed successfully.\");\n}\n"}]}