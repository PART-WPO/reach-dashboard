{"files":[{"id":"30a17b2e-c4f4-43e4-9228-3b233a479466","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"ef830eac-bf4d-45e2-814f-138e5b23a8bb","name":"Code","type":"server_js","source":"/**\n * getLastMonthPublications()\n *\n * Purpose:\n * - On the LAST DAY OF THE MONTH, query CrossRef for publications that reference any award numbers listed on the \"Award Numbers\" sheet.\n * - Create/overwrite a sheet tab named \"\u003cMonth\u003e \u003cYear\u003e\" with results found THIS MONTH.\n * - Email a summary to [INSERT YOUR EMAIL HERE] with a link to the spreadsheet.\n *\n * How to use:\n * - Set a time-based trigger to run this function daily (e.g., every day at 8 PM local time).\n *   The function exits early on all days except the last day of the month.\n *\n * Assumptions:\n * - Google Sheet named \"Award Numbers\" exists; award numbers are listed in column A starting at A2.\n * - Script timezone is configured correctly in Apps Script (File \u003e Project properties \u003e Script properties).\n *\n */\nfunction getLastMonthPublications() {\n  // --- Early exit if today is NOT the last day of the month -------------------\n  const today \u003d new Date();\n  const tomorrow \u003d new Date(today);\n  tomorrow.setDate(today.getDate() + 1);\n  const isLastDayOfMonth \u003d (tomorrow.getDate() \u003d\u003d\u003d 1);\n\n  if (!isLastDayOfMonth) {\n    Logger.log(\"‚è≠ Not the last day of the month. Exiting without processing.\");\n    return; // Prevents unnecessary API calls on non-final days\n  }\n\n  // --- Get award numbers from the \"Award Numbers\" sheet ----------------------\n  const sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Award Numbers\");\n  if (!sheet) throw new Error(\u0027Sheet \"Award Numbers\" not found.\u0027);\n\n  // Pull values from A2 down; flatten to a 1-D array; coerce to strings; trim spaces\n  const awardNumbers \u003d sheet\n    .getRange(\"A2:A\" + sheet.getLastRow())\n    .getValues()\n    .flat()\n    .map(a \u003d\u003e a.toString().trim())\n    .filter(a \u003d\u003e a.length \u003e 0); // Ignore blank rows\n\n  // --- Compute current month boundaries (inclusive) --------------------------\n  const now \u003d new Date();\n  const firstOfThisMonth \u003d new Date(now.getFullYear(), now.getMonth(), 1);      // 00:00:00 local\n  const lastOfThisMonth  \u003d new Date(now.getFullYear(), now.getMonth() + 1, 0);  // 00:00:00 local\n  lastOfThisMonth.setHours(23, 59, 59, 999); // Make the end boundary inclusive (end of day)\n\n  // Name results tab like \"August 2025\"\n  const monthName \u003d firstOfThisMonth.toLocaleString(\u0027default\u0027, { month: \u0027long\u0027 });\n  const year \u003d firstOfThisMonth.getFullYear();\n  const sheetName \u003d `${monthName} ${year}`;\n\n  Logger.log(`üìÖ Filtering for publications between ${firstOfThisMonth.toDateString()} and ${lastOfThisMonth.toDateString()}`);\n\n  // Initialize a 2D array that becomes the new sheet content\n  const results \u003d [[\"Award Number\", \"DOI\", \"Title\", \"Published Date\", \"Citation\"]];\n  let totalFound \u003d 0;\n\n  // --- Query CrossRef for each award number ----------------------------------\n  awardNumbers.forEach((award, index) \u003d\u003e {\n    Logger.log(`[${index + 1}/${awardNumbers.length}] Checking: ${award}`);\n\n    // Fetch all candidate works that mention this award number\n    const pubs \u003d searchCrossRefForAward(award);\n    Logger.log(`--\u003e ${pubs.length} match(es) returned from CrossRef for ${award}`);\n\n    // Filter to publications with a published date in THIS MONTH\n    pubs.forEach(pub \u003d\u003e {\n      const pubDate \u003d new Date(pub.publishedDate); // already a Date object in our map\n      if (pubDate \u003e\u003d firstOfThisMonth \u0026\u0026 pubDate \u003c\u003d lastOfThisMonth) {\n        const citation \u003d pub.citation || \"Unknown Author (Unknown Year)\";\n        Logger.log(`‚úî \"${citation}\" ‚Äì \"${pub.title}\"`);\n\n        // Normalize date to YYYY-MM-DD for the sheet\n        const isoDate \u003d pubDate.toISOString().split(\"T\")[0];\n\n        // Push a new row to the results table\n        results.push([award, pub.doi, pub.title, isoDate, citation]);\n        totalFound++;\n      }\n    });\n  });\n\n  // --- Write results to the monthly tab --------------------------------------\n  const ss \u003d SpreadsheetApp.getActiveSpreadsheet();\n  const monthSheet \u003d ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);\n\n  // Clear previous contents to ensure a clean monthly report\n  monthSheet.clearContents();\n\n  // Write header + all rows in one batch call for performance\n  monthSheet.getRange(1, 1, results.length, results[0].length).setValues(results);\n\n  Logger.log(`‚úÖ Found ${totalFound} publication(s) for ${sheetName}`);\n\n  // --- Build and send the email summary --------------------------------------\n  const sheetUrl \u003d ss.getUrl();\n\n  const emailSubject \u003d (totalFound \u003e 0)\n    ? `New ST\u0026S Publications Report ‚Äì ${sheetName}`\n    : `No New ST\u0026S Publications Found ‚Äì ${sheetName}`;\n\n  const emailBody \u003d (totalFound \u003e 0)\n    ? `The \"${sheetName}\" tab has been updated with ${totalFound} new publication(s).\\n\\nYou can view the spreadsheet here:\\n${sheetUrl}`\n    : `No new publications were found for ${sheetName}, but the tab has still been updated for your records.\\n\\nView the spreadsheet here:\\n${sheetUrl}`;\n\n  MailApp.sendEmail({\n    to: \"INSERT YOUR EMAIL HERE\",\n    subject: emailSubject,\n    body: emailBody\n  });\n\n  Logger.log(`üìß Email sent to INSERT YOUR EMAIL HERE`);\n}\n\n/**\n * searchCrossRefForAward(awardNumber)\n *\n * Purpose:\n * - Call the CrossRef Works API and return items that explicitly list the given award number\n *   in their funder award metadata.\n *\n * Returns:\n * - Array of objects: { doi, title, publishedDate (Date), citation }\n *\n * Notes:\n * - We first fetch up to 100 items that match the award number (broad \"query\" param).\n * - Then we FILTER to items whose \"funder[].award\" includes the exact awardNumber.\n * - We derive a best-effort publication date from \u0027published-print\u0027 or \u0027published-online\u0027.\n * - \"citation\" is a lightweight \"FirstAuthorLastName et al. (Year)\" helper for quick review.\n */\nfunction searchCrossRefForAward(awardNumber) {\n  // CrossRef API endpoint:\n  // - Using \"query\" to broadly search; then we explicitly filter by funder.award to avoid false positives.\n  // - Consider adding \"mailto\u003d\" for best-practice identification, e.g., \u0026mailto\u003dyour_email@org.gov\n  const apiUrl \u003d `https://api.crossref.org/works?query\u003d${encodeURIComponent(awardNumber)}\u0026rows\u003d100`;\n\n  try {\n    const response \u003d UrlFetchApp.fetch(apiUrl, {\n      muteHttpExceptions: true,\n      // Optional but recommended: identify your script politely\n      // headers: { \u0027User-Agent\u0027: \u0027WPO-ST\u0026S-Tracker/1.0 (mailto:part.wpo@noaa.gov)\u0027 },\n    });\n\n    // Parse payload safely. If the response is not JSON, this will throw and be caught.\n    const data \u003d JSON.parse(response.getContentText());\n    const items \u003d data.message?.items || [];\n\n    // Keep only items that list this award number in their funder.award list\n    return items\n      .filter(item \u003d\u003e {\n        const funders \u003d item.funder || [];\n        return funders.some(f \u003d\u003e (f.award || []).includes(awardNumber));\n      })\n      .map(item \u003d\u003e {\n        // Prefer \u0027published-print\u0027, else fallback to \u0027published-online\u0027\n        const publishedDateParts \u003d\n          item[\u0027published-print\u0027]?.[\u0027date-parts\u0027]?.[0] ||\n          item[\u0027published-online\u0027]?.[\u0027date-parts\u0027]?.[0];\n\n        // Build a Date from [YYYY, MM?, DD?]. Default missing month/day to 1.\n        const pubDate \u003d publishedDateParts\n          ? new Date(\n              publishedDateParts[0],\n              (publishedDateParts[1] || 1) - 1, // months are 0-indexed\n              publishedDateParts[2] || 1\n            )\n          : null;\n\n        // Construct a simple author-year citation (e.g., \"Smith et al. (2024)\")\n        const authors \u003d item.author || [];\n        const firstAuthorLastName \u003d authors.length \u003e 0 ? (authors[0].family || \"Unknown Author\") : \"Unknown Author\";\n        const year \u003d publishedDateParts?.[0] || \"Unknown Year\";\n        const citation \u003d `${firstAuthorLastName} et al. (${year})`;\n\n        return {\n          doi: item.DOI ? `https://doi.org/${item.DOI}` : \"\",\n          title: item.title?.[0] || \"No title\",\n          publishedDate: pubDate,\n          citation: citation\n        };\n      })\n      // Drop any items where we failed to build a proper Date\n      .filter(item \u003d\u003e item.publishedDate instanceof Date \u0026\u0026 !isNaN(item.publishedDate));\n  } catch (e) {\n    // Handle HTTP or JSON parse errors gracefully; continue processing other awards\n    Logger.log(`‚ùå Error fetching for ${awardNumber}: ${e}`);\n    return [];\n  }\n}\n"}]}